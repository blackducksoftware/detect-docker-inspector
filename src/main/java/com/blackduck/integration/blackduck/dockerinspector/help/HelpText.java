/**
 * blackduck-docker-inspector
 *
 * Copyright (c) 2024 Black Duck Software, Inc.
 *
 * Use subject to the terms and conditions of the Black Duck Software End User Software License and Maintenance Agreement. All rights reserved worldwide.
 */
package com.blackduck.integration.blackduck.dockerinspector.help;

import java.util.SortedSet;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.synopsys.integration.blackduck.dockerinspector.config.Config;
import com.synopsys.integration.blackduck.dockerinspector.config.DockerInspectorOption;

@Component
public class HelpText {

    @Autowired
    private Config config;

    public String getMarkdownForProperties() {
        StringBuilder usage = new StringBuilder();
        usage.append("# Advanced properties\n\n");
        usage.append("<!-- This file is generated by the detect-docker-inspector build docs target as: detect-docker-inspector/docs/generated/advanced-properties.md -->\n\n");
        usage.append("The table below lists advanced Docker Inspector properties that can be set using the \"detect.docker.passthrough.\" property prefix:\n\n");
        usage.append("Property name | Type | Description | Default value | Deprecation Status | Deprecation Message\n");
        usage.append("------------- | ---- | ----------- | ------------- | ------------------ | -------------------\n");
        SortedSet<DockerInspectorOption> configOptions = config.getPublicConfigOptions();
        for (DockerInspectorOption opt : configOptions) {
            StringBuilder usageLine = new StringBuilder(String.format("%s | %s | %s | ", opt.getKey(), opt.getValueTypeString(), opt.getDescription()));
            if (!StringUtils.isBlank(opt.getDefaultValue())) {
                usageLine.append(opt.getDefaultValue());
            } else {
                usageLine.append(" ");
            }
            usageLine.append("| ");
            if (opt.isDeprecated()) {
                usageLine.append("Deprecated");
                usageLine.append(" | ");
                if (StringUtils.isNotBlank(opt.getDeprecationMessage())) {
                    usageLine.append(opt.getDeprecationMessage());
                }
            } else {
                usageLine.append("  |  ");
            }
            usageLine.append("| ");
            usage.append(usageLine.toString());
            usage.append("\n");
        }
        return usage.toString();
    }
}
